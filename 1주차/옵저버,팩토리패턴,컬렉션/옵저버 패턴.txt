옵저버 패턴 이란?

한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체들한테 연락이 가고 자동으로 내용이 갱신되는 방식.(일대다수)

Subject 객체

1. 일부 데이터를 관리한다.(일반적으로 데이터 취득 처리)

2. 데이터가 바뀌면 새로운 데이터 값이 어떤 방법으로든 Observer들에게 그 소식을 전달한다.

3. Observer 생성, 제거, 현제 상태 취득

Observer 객체

1. Observer 객체들은 Subject 객체를 구독하고 있으며(Subject 객체에 등록되어 있으며) Subject의 데이터가 바뀌면 갱신 내용을 전달받는다.



느슨한 연결?
1. 객체 지향 원칙 중 하나 서로 상호작용을 하는 객체 사이에는 가능하면 느슨하게 결합하는 디자인을 사용해야 한다.
2. 객체가 느슨하게 결합되어 있다는 것은, 그 둘이 상호작용을 하긴 하지만 서로에 대해 서로 잘 모른다는 것을 의미한다.
3. Subject가 Observer에 대해서 아는 것은 Observer가 특정 인터페이스를 구현한다는 것 뿐이다.
   -> Subject는 Observer가 상속 혹은 implements 받은 클래스만 알고 있다는 뜻
   -> 이것을 알아야 Observer에서 콜백을 받기 위한 기능 구현을 Subject에서 할 수 있다.
4. Observer의 추가 삭제가 자유롭다.
5. 새로운 형식의 Observer를 추가하려고 할 때에도 Subject를 변경할 필요가 없다.
6. Subject와 Observer는 서로 독립적으로 재사용 할 수 있다.
7. Subject와 Observer의 내용이 바뀌더라도 서로에게 영향을 미치지 않는다. 


값이 변하는 것 = 관찰 대상
변화에 따라 대응하는 것 = 관찰자