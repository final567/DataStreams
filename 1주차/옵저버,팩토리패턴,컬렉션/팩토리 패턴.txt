팩토리 패턴이란?
1. 말 그대로 공장에서 물건을 만들 때 가장 효과적으로 만드는 패턴
2. 생산자클래스와 제품클래스로 구분
3. 인스턴스를 만들기위한 골격과 실제의 인스턴스 생성의 클래스로 구분된다.
4. new를 사용해서 실제 인스턴스를 생성하는 대신, 인스턴스생성을 위한 메소드를 호출해서 구체적인 클래스 이름에 의한 속박에서 상위 클래스를 자유롭게 만든다.
 

팩토리 패턴의 장점

1. 효율적인 객체 생성을 위한 디자인 패턴

2. 객체 지향의 미덕 중 하나인 정보 은닉, 캡슐화, 유연성, 느슨한 관계를 만들 수 있는 좋은 방법

  -> 제품 생산, 사용 부분 분리 가능

  -> 제품의 추가나 구성의 변화에도 느슨하게 결합되어 유연함

  -> 객체 생성 코드는 오직 하나의 객체나 메소드가 담당

  -> 이로 인해 중복을 방지 할 수 있고 변화 시엔 해당되는 구상 클래스만 조금 손봐주면 됨



팩토리 메소드 패턴에서는 객체를 생성하기 위한 인터페이스(createPizza())를 정의하는데, 
어떤 클래스의 인스턴스를 만들지는 서브 클래스(NYPizzaStore, LAPizzaStore)에서 결정하게 만든다. 
클래스의 인스턴스를 만드는 일을 서브클래스에 맡기는 것이다.

팩토리 패턴을 쓰는 이유 : 안쓰면 결합도가 매우 높다. 그렇기 때문에 나중에 코드를 수정해야 할 가능성이 높아지고, 유연성이 떨어진다.